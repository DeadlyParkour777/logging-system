networks:
  logging_network:
    driver: bridge

services:
  log-collector:
    container_name: log-collector
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: log-collector
    volumes:
      - ./services/configs/log-collector.yaml:/app/config.yaml:ro
    ports:
      - "8081:8081"
    networks:
      - logging_network
    depends_on:
      kafka-init:
        condition: service_completed_successfully

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    networks:
      - logging_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    networks:
      - logging_network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-init:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka-init
    depends_on:
      - kafka
    networks:
      - logging_network
    command: >
      /bin/sh -c "
        cub kafka-ready -b kafka:29092 1 20;
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic logs --partitions 1 --replication-factor 1;
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic alerts --partitions 1 --replication-factor 1;
      "
    restart: "no"

  clickhouse-server:
    image: clickhouse/clickhouse-server:25.8
    container_name: clickhouse-server
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: password
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse/
      - ./docker/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - logging_network
    healthcheck:
      test: ["CMD", "clickhouse-client", "--password", "password", "--query", "SELECT 1"]     
      interval: 10s
      timeout: 5s
      retries: 5

  log-processor:
    container_name: log-processor
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: log-processor
    volumes:
      - ./services/configs/log-processor.yaml:/app/config.yaml:ro
    networks:
      - logging_network
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      clickhouse-server:
        condition: service_healthy

  alert-service:
    container_name: alert-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: alert-service
    volumes:
      - ./services/configs/alert-service.yaml:/app/config.yaml:ro
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    networks:
      - logging_network
    depends_on:
      kafka-init:
        condition: service_completed_successfully

  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - logging_network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
  query-api:
    container_name: query-api
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_PATH: query-api
    volumes:
      - ./services/configs/query-api.yaml:/app/config.yaml:ro
    # ports:
    #   - "8082:8082"
    networks:
      - logging_network
    depends_on:
      clickhouse-server:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    ports:
      - "8080:80"
    networks:
      - logging_network
    depends_on:
      - query-api

  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "4317:4317"
    networks:
      - logging_network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.101.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./docker/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4318:4318"
    networks:
      - logging_network
    depends_on:
      - jaeger
      
volumes:
  clickhouse_data:
  redis_data:
